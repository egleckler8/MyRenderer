#version 330 core

in vec3 Normal;
in vec3 FragPos;

out vec4 FragColor;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
// viewPos is always (0,0,0) in view space!


void main()
{

    //
    // PHONG LIGHTING MODEL
    //

    // Ambient lighting
    float ambientIntensity = 0.1;
    vec3 ambientLight = ambientIntensity * lightColor;

    // Diffuse lighting
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diffusion = max(dot(norm, lightDir), 0.0);
    vec3 diffuseLight = diffusion * lightColor;

    // Specular lighting
    float specularIntensity = 0.5;
    // viewPos is always (0,0,0) in view space!
    // so, we just reverse the direction of FragPos...
    // the view direction vector should be pointing back
    // towards the viewer
    vec3 viewDir = normalize(-FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specularLight = specularIntensity * spec * lightColor;

    // Adding it all up and output
    vec3 result = (ambientLight + diffuseLight + specularLight) * objectColor;
    FragColor = vec4(result, 1.0f);


}